# Generated by carnix 0.7.2: carnix nix --src ./.
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  rust_in_action = f: rust_in_action_0_2_16 { features = rust_in_action_0_2_16_features { rust_in_action_0_2_16 = f; }; };
  __all = [ (rust_in_action {}) ];
  rust_in_action_0_2_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rust-in-action";
    version = "0.2.16";
    authors = [ "Eric Bailey <eric@ericb.me>" ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  rust_in_action_0_2_16 = { features?(rust_in_action_0_2_16_features {}) }: rust_in_action_0_2_16_ {};
  rust_in_action_0_2_16_features = f: updateFeatures f (rec {
    rust_in_action_0_2_16.default = (f.rust_in_action_0_2_16.default or true);
  }) [];
}
