* Modeling Files
  :PROPERTIES:
  :header-args: :tangle ch3-mock-files.rs
  :END:

#+BEGIN_SRC rust
extern crate rand;
use rand::Rng;
#+END_SRC
 
#+BEGIN_SRC rust :padline yes
fn one_in(n: u32) -> bool {
    rand::thread_rng().gen_bool(1.0/(n as f64))
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
#[derive(Debug,PartialEq)]
enum FileState {
    Open,
    Closed,
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
#[derive(Debug)]
struct File {
    name: String,
    data: Vec<u8>,
    state: FileState,
}
#+END_SRC

#+BEGIN_SRC rust
impl File {
    fn new(name: &str) -> File {
        File {
            name: String::from(name),
            data: Vec::new(),
            state: FileState::Closed,
        }
    }

    fn new_with_data(name: &str, data: &Vec<u8>) -> File {
        let mut f = File::new(name);
        f.data = data.clone();
        f
    }

    fn read(self: &File, save_to: &mut Vec<u8>) -> Result<usize, String> {
        if self.state != FileState::Open {
            return Err(String::from("File must be open for reading"));
        }
        let mut tmp         = self.data.clone();
        let     read_length = tmp.len();
        save_to.reserve(read_length);
        save_to.append(&mut tmp);
        Ok(read_length)
    }
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn open(mut f: File) -> Result<File, String> {
    if one_in(10_000) {
        let err_msg = String::from("Permission denied");
        return Err(err_msg);
    } else {
        f.state = FileState::Open;
        return Ok(f);
    }
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn close(mut f: File) -> Result<File, String> {
    if one_in(100_000) {
        let err_msg = String::from("Interrupted by signal!");
        return Err(err_msg);
    } else {
        f.state = FileState::Closed;
        return Ok(f);
    }
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn main() {
    let f4_data: Vec<u8> = vec![114, 117, 115, 116, 33];
    let mut f4 = File::new_with_data("4.txt", &f4_data);

    let mut buffer: Vec<u8> = vec![];

    f4 = open(f4).unwrap();
    let f4_length = f4.read(&mut buffer).unwrap();
    f4 = close(f4).unwrap();

    let text = String::from_utf8_lossy(&buffer);

    println!("{:?}", f4);
    println!("{} is {} bytes long", &f4.name, f4_length);
    println!("{}", text);
}
#+END_SRC
