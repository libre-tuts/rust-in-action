* Modeling Files
  :PROPERTIES:
  :header-args: :tangle ch3-mock-files.rs
  :END:

Prevent compiler warnings about unused variables.
#+BEGIN_SRC rust
#![allow(unused_variables)]
#+END_SRC

#+BEGIN_SRC rust :padline yes
#[derive(Debug)]
#+END_SRC

#+BEGIN_SRC rust
struct File {
    name: String,
    data: Vec<u8>,
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn open(f: &mut File) -> bool {
    true
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn close(f: &mut File) -> bool {
    true
}
#+END_SRC

Prevent compiler warnings about unused code.
#+BEGIN_SRC rust :padline yes
#[allow(dead_code)]
#+END_SRC

#+BEGIN_SRC rust
fn read(f: &File, save_to: &mut Vec<u8>) -> usize {
    let mut tmp = f.data.clone();
    let read_length = tmp.len();
    save_to.reserve(read_length);
    save_to.append(&mut tmp);
    read_length
}
#+END_SRC

#+BEGIN_SRC rust :padline yes
fn main() {
    let mut f2 = File {
        name: String::from("2.txt"),
        data: vec![114, 117, 115, 116, 33],
    };

    let mut buffer: Vec<u8> = vec![];

    open(&mut f2);
    let f2_length = read(&f2, &mut buffer);
    close(&mut f2);

    let text = String::from_utf8_lossy(&buffer);

    println!("{:?}", f2);
    println!("{} is {} bytes long", &f2.name, f2_length);
    println!("{}", text)
}
#+END_SRC
